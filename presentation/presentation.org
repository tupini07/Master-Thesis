#+STARTUP: beamer
#+title: Soweego: Ensemble learning applied to Record Linkage

#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=.4\textwidth]{../graphics/logo_unitn.png}}

#+author: Andrea Tupini
#+EMAIL:  andrea.tupini@studenti.unitn.it 
#+DATE:   2019-10-23

#+latex_header: \usepackage{multicol}
#+options: H:2 toc:nil num:t
#+latex_class: beamer
#+LATEX_CLASS_OPTIONS: [presentation]
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: Dresden
#+beamer_color_theme: orchid
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header:
#+latex_header: \AtBeginSection[] {\begin{frame}{Outline} \begin{multicols}{2} \tableofcontents[currentsection,hideallsubsections,sectionstyle=show/shaded] \end{multicols} \end{frame}} }
 

* Problem
** Wikidata
   
   - Powers Wikimedia Foundation projects
   - Collection of *items*, each of which is associated with some *statements*.

*** Notes                                                            :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:
    
    Wikidata is one of the biggest knowledge bases in the web. It powers the
    Wikipedia free encyclopedia, as well as all the of the other Wikimedia
    foundation projects.
    
    Wikidata contains information, or claims, about different /items/. In
    Wikidata lingo, these claims are called /statements/. 

    An example of such statement can be /when or where a person was born/.

** Data quality and trust
   
*** Quality
    Identifiers enable feedback loop

*** Trust
    References to external reliable sources

*** Notes                                                            :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:

    Wikidata strives to have the highest possible data quality and
    trustworthiness. 

    If a claim about an item is backed up by an external reference then users
    can go and check this reference and corroborate that the information stated
    in Wikidata is actually correct.

    If, on the other hand, the information is in any way incorrect then the
    statements in Wikidata can be flagged or directly fixed by the community.

  
** Example


*** Left                                                           :B_column:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.5
    :END:

    #    #+ATTR_LATEX: :width 0.3\textwidth
    #    [[../graphics/Wikidata-logo-en.png]]

    #+caption: Wikidata (Q42)
    #+ATTR_LATEX: :width 0.6\textwidth
    [[../graphics/douglas_adams_headshot_wikidata.jpg]]


*** Right                                                          :B_column:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.5
    :END:

    #    #+ATTR_LATEX: :width 0.3\textwidth
    #    [[../graphics/imdb_logo.png]]

    #+caption: IMDb (nm0010930)
    #+ATTR_LATEX: :width 0.6\textwidth
    [[../graphics/douglas_adams_headshot_imdb.png]]


*** Notes                                                            :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:


** Missing References                                              

   There are a total of /744.4 million/ *statements*
    
   - /200.5 million/ are unreferenced (26%)
    
   TODO: Piechart

   #  #+ATTR_LATEX: :width 0.6\textwidth
   #  [[../graphics/graphana_screenshot.png]]

*** Notes                                                            :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:

    It is very important for Wikidata to have proper references. However, around
    26% of Wikidata statements are unreferenced.
     
    This means that users have no way of verifying if the information claimed by
    these statements is actually correct, since there is no trusted, external
    source of data they can go and check.

    
* Soweego Introduction

  
** What is soweego?

   - Open source project of the /Wikimedia Foundation/
   - Uses record linkage and supervised machine learning to link Wikidata entities with external /catalogs/

*** Note                                                             :B_note:
    :PROPERTIES:
    :BEAMER_env: note
    :END:

    Soweego 

** Some terminology

   - *Catalog* collection of information
     - A *Target catalog* refers to any collection of information which is not Wikidata
     - *Source catalog* = Wikidata
   - *Entity* is a specific item in a catalog

** Overview of soweego

    - Input: pairs of /entities/
      - source = Wikidata
      - target = target catalog 
    - Output: *links* as Wikidata identifier statements
    # - Output: *probability* that each pair represents the same entity 


** Example

    #+ATTR_LATEX: :width \textwidth
    [[../graphics/douglas_adams_Wikidata_head.png]]


    #+ATTR_LATEX: :width \textwidth
    [[../graphics/douglas_adams_Wikidata_imdb_identifier.png]]


** External Catalogs

*** Used catalogs                                                   :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

    - As a starting point, /soweego/ focuses on the domain of *people*
    - According to Wikidata Statistics, around 10% of all entities are people

*** IMDb                                                            :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:
    
    | Entity   | Training | Classification |
    |----------+----------+----------------|
    | Actor    | 177,417  | 89,081         |
    | Director | 46,904   | 8,407          |
    | Musician | 61,034   | 210,017        |
    | Producer | 19,861   | 2,075          |
    | Writer   | 41,373   | 15,143         |


*** Musicbrainz                                                     :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

    | Entity   | Training | Classification |
    |----------+----------+----------------|
    | Band     | 47,096   | 32,407         |
    | Musician | 118,107  | 153,437        |

*** Discogs                                                         :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

    | Entity   | Training | Classification |
    |----------+----------+----------------|
    | Band     | 43,428   | 36,200         |
    | Musician | 88,069   | 183,483        |

* Soweego Pipeline

** Pipeline steps

   - Importer
   - Blocking
   - Data preprocessing
   - Feature extraction
   - Linker
   - Upload results

** Importer
   
   - Download data from catalogs
   - Transform it into a common structure
   - Save it into soweego's internal database

** Blocking

   - Reduces complexity
   - Only compare pairs of entities which have a similar name

** Data preprocessing
   
   - Normalize
   - Tokenize
   - Handle dates
   - Clean datasets

** Feature extraction

*** Definition                                                      :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

   - Field pair comparison
   - Fields \rightarrow Similarity Function \rightarrow Score
   - One feature vector which characterizes similarity between pair

*** Comparison functions                                            :B_frame:
    :PROPERTIES:
    :BEAMER_env: frame
    :END:

    
**** Left                                                          :B_column:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :BEAMER_env: column
     :END:
     
     - Exact match
     - Similar strings
       - Levenshtein
       - Cosine

**** Right                                                         :B_column:
     :PROPERTIES:
     :BEAMER_col: 0.5
     :BEAMER_env: column
     :END:

     - Similar dates
     - Shared tokens
     - Shared occupations

** Linking

   - Take feature vectors and returns probability that pair is a match

** Upload results
   
   Define /upper/ t_U and /lower/ t_L thresholds.
 
   - *non-match*, if /prob \leq t_L/
   - *potential-match*, if /t_L < prob < t_U/
   - *match*, if /t_U \leq prob/


* Algorithms

** Baseline classifiers

   - Linear SVM
   - Naive Bayes
   - Logistic Regression
   - Random Forest
   - Single-Layer Perceptron
   - Multi-Layer Perceptron

** Ensemble classifiers

   - Soft Voting Classifier
   - Hard Voting Classifier
   - Gated Ensemble
   - Stacked Ensemble
   
* Results

** How are results presented
   
   The results will be presented in terms of the following metrics:

   - Precision
   - Recall
   - F1 Score

** Baseline results

   | Model                   | Precision |   Recall |       F1 |
   |-------------------------+-----------+----------+----------|
   | Multi-Layer Perceptron  |  *0.9166* |   0.9349 | *0.9349* |
   |-------------------------+-----------+----------+----------|
   | Random Forest           |    0.9145 |   0.9307 |   0.9223 |
   |-------------------------+-----------+----------+----------|
   | Logistic Regression     |    0.9121 |   0.9314 |   0.9215 |
   |-------------------------+-----------+----------+----------|
   | Single-Layer Perceptron |    0.9145 |   0.9284 |   0.9212 |
   |-------------------------+-----------+----------+----------|
   | Linear SVM              |    0.9093 |   0.9342 |   0.9210 |
   |-------------------------+-----------+----------+----------|
   | Naive Bayes             |    0.8863 | *0.9490* |   0.9151 |


** Ensemble results

   | Model            | Precision |   Recall |       F1 |
   |------------------+-----------+----------+----------|
   | Soft Voting      |    0.9199 | *0.9308* | *0.9248* |
   |------------------+-----------+----------+----------|
   | Gate Classifier  |    0.9227 |   0.9268 |   0.9245 |
   |------------------+-----------+----------+----------|
   | Hard Voting      |    0.9145 |   0.9344 |   0.9239 |
   |------------------+-----------+----------+----------|
   | Stack Classifier |  *0.9235* |   0.9242 |   0.9234 |

** 5 best classifiers

   | Model                  | Precision    | Recall       | F1           |
   |------------------------+--------------+--------------+--------------|
   | Multi-Layer Perceptron | 0.9166 (4)   | *0.9349* (1) | *0.9255* (1) |
   |------------------------+--------------+--------------+--------------|
   | Soft Voting            | 0.9199 (3)   | 0.9308 (3)   | 0.9248 (2)   |
   |------------------------+--------------+--------------+--------------|
   | Gate Classifier        | 0.9227 (2)   | 0.9268 (4)   | 0.9245 (3)   |
   |------------------------+--------------+--------------+--------------|
   | Hard Voting            | 0.9145 (5)   | 0.9344 (2)   | 0.9239 (4)   |
   |------------------------+--------------+--------------+--------------|
   | Stack Classifier       | *0.9235* (1) | 0.9242 (5)   | 0.9234 (5)   |

* Discussion

** Soweego usage 
   
   - We don't want to degrade the quality of the data
   - Unsure matches can be uploaded to Mix'n'Match

** Iterative training

   - Repeated executions
   - Next execution gets output of previous one

* Future work                                                       

** Future Work

  - Better construction of base classifiers
  - Leverage relations among entities
  - Explore other ensembling techniques
  - Explore how performance varies using other kinds of entities
    
